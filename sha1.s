// x0 - x7   : parameter and result
// x8 (xr)   : indirect return value address
// x9 - x15  : caller save（local variables）

// v0 - v7   : parameter and result
// v16 - v31 : caller saved (local variables)

	.global G_sha1_block

	.cpu generic+fp+simd+crypto

# ---------------------------------
// >>> IN
// [ハッシュ初期値] v24 : (D C B A)、V25.4s[0] : E
// [512 bits ブロック] v26, 27, 28, 29 (注意：ビッグエンディアンで値を格納すること)
//
// <<< OUT
// [ハッシュ結果] v24 : (D C B A)、V25.4s[0] : E

G_sha1_block:
		mov		x29, x30		// lr の退避

		// ----------------------
		adr		x4, L_rcon
		ld1		{v4.16b}, [x4], 16
		ld1		{v5.16b}, [x4], 16
		ld1		{v6.16b}, [x4], 16
		ld1		{v7.16b}, [x4]
		
		// ----------------------
		// v24 の値を退避（v25 は破壊されない）
		// v24, v25 の初期値は、最後の足し算で利用される
		mov		v22.16b, v24.16b	// v22 <- ABCD 待避
		
		# ----------
		// LOOP 0 -> 19
		#1 ----------
		add		v16.4s, v4.4s, v26.4s	// v16 = k1 + (3 2 1 0)
		sha1h	s19, s24				// s19 = ROL(a0, 30)（=e4）

		sha1c	q24, s25, v16.4s
		// v24: (d0 c0 b0 a0), s25: e0, v16: k1 + (3 2 1 0)
		// sha1c = (((b EOR c) AND a) EOR c) = (b & c) | (~b & d)
		// f = (b0 & c0) | (~b0 & d0)
		// y = ROL(a0, 5) + e0 + f + k1 + w[0]
		// b' = ROL(b0, 30)
		// (e', v24) = ROL((y d0 c0 b' a0), 32) = (d0 c0 b' a0 y)
		// v24 = (d1 c1 b1 a1)
		// ...
		// v24 = (d4 c4 b4 a4)
	
		sha1su0	v26.4s, v27.4s, v28.4s
		// v26: (3 2 1 0), v27: (7 6 5 4), v28: (11 10 9 8)
		// v26 = (11 10 9 8) ^ (5 4 3 2) ^ (3 2 1 0)

		sha1su1	v26.4s, v29.4s
		// v26: (11 10 9 8) ^ (5 4 3 2) ^ (3 2 1 0)
		// v29: (15 14 13 12)
		// t = (. 15 14 13) ^ (11 10 9 8) ^ (5 4 3 2) ^ (3 2 1 0)
		// v26 = ROL1((. 15 14 13) ^ (11 10 9 8) ^ (5 4 3 2) ^ (3 2 1 0))
		//		^ ROL2((13 . . .) ^ (8 . . .) ^ (2 . . .) ^ (0 . . .))
		//     = ROL1((. 15 14 13) ^ (11 10 9 8) ^ (5 4 3 2) ^ (3 2 1 0))
		//		^ ROL1(16 . . .)
		//     = (19 18 17 16)
		
		#2 ----------
		add		v17.4s, v4.4s, v27.4s	// v17 = k1 + (7 6 5 4)
		sha1h	s18, s24				// s18 = ROL(a4, 30)（=e8）
	
		sha1c	q24, s19, v17.4s
		// v24: (d4 c4 b4 a4), s19: e4, v17 = k1 + (7 6 5 4)
		// v24 = (d8 c8 b8 a8)
		
		sha1su0	v27.4s, v28.4s, v29.4s
		// v27: (7 6 5 4), v28: (11 10 9 8), v29: (15 14 13 12)
		// v27 = (15 14 13 12) ^ (9 8 7 6) ^ (7 6 5 4)
		
		sha1su1	v27.4s, v26.4s
		// v27: (15 14 13 12) ^ (9 8 7 6) ^ (7 6 5 4)
		// v26: (19 18 17 16)
		// t = (. 19 18 17) ^ (15 14 13 12) ^ (9 8 7 6) ^ (7 6 5 4)
		// v27 = ROL1((. 19 18 17) ^ (15 14 13 12) ^ (9 8 7 6) ^ (7 6 5 4))
		//		^ ROL2((17 . . .) ^ (12 . . .) ^ (6 . . .) ^ (4 . . .))
		//     = ROL1((. 19 18 17) ^ (15 14 13 12) ^ (9 8 7 6) ^ (7 6 5 4))
		//		^ ROL1(20 . . .)
		//     = (23 22 21 20)
		
		#3 ----------
		add		v16.4s, v4.4s, v28.4s	// v16 = k1 + (11 10 9 8)
		sha1h	s19, s24				// s19 = ROL(a8, 30)（=e12）
		
		sha1c	q24, s18, v16.4s
		// v24: (d8 c8 b8 a8), s18: e8, v16: k1 + (11 10 9 8)
		// v24 = (d12, c12, b12, a12)
		
		sha1su0	v28.4s, v29.4s, v26.4s
		// v28: (11 10 9 8), v29: (15 14 13 12), v26: (19 18 17 16)
		// v28 = (19 18 17 16) ^ (13 12 11 10) ^ (11 10 9 8)
		
		sha1su1	v28.4s, v27.4s
		// v28: (19 18 17 16) ^ (13 12 11 10) ^ (11 10 9 8)
		// v27: (23 22 21 20)
		// v28 = (27 26 25 24)
		
		#4 ----------
		add		v17.4s, v4.4s, v29.4s	// v17 = k1 + (15 14 13 12)
		sha1h	s18, s24				// s18 = ROL(a12, 30) (=e16)
		
		sha1c	q24, s19, v17.4s
		// v24: (d12, c12, b12, a12), s19: e12, v17: k1 + (15 14 13 12)
		// v24 = (d16, c16, b16, a16)

		sha1su0	v29.4s, v26.4s, v27.4s
		// v29: (15 14 13 12), v26: (19 18 17 16), v27: (23 22 21 20)
		// v29 = (23 22 21 20) ^ (17 16 15 14) ^ (15 14 13 12)

		sha1su1	v29.4s, v28.4s
		// v29: (23 22 21 20) ^ (17 16 15 14) ^ (15 14 13 12)
		// v28: (27 26 25 24)
		// v29 = (31 30 29 28)
		
		#5 ----------
		add		v16.4s, v4.4s, v26.4s	// v16 = k1 + (19 18 17 16)
		sha1h	s19, s24				// s19 = ROL(a16, 30) (=e20)
		
		sha1c	q24, s18, v16.4s
		// v24: (d16, c16, b16, a16), s19: e12, v17: k1 + (15 14 13 12)
		// v24 = (d20, c20, b20, a20)

		sha1su0	v26.4s, v27.4s, v28.4s
		// v26: (19 18 17 16), v27: (23 22 21 20), v28: (27 26 25 24)
		// v26 = (27 26 25 24) ^ (21 20 19 18) ^ (19 18 17 16)

		sha1su1	v26.4s, v29.4s
		// v26: (27 26 25 24) ^ (21 20 19 18) ^ (19 18 17 16)
		// v29: (31 30 29 28)
		// v26 = (35 34 33 32)
	
		# ----------
		// LOOP 20 -> 39
		#1 ----------
		add		v17.4s, v5.4s, v27.4s	// v17 = k2 + (23 22 21 20)
		sha1h	s18, s24				// s18 = ROL(a20, 30) (=e24)
		
		sha1p	q24, s19, v17.4s
		// v24: (d20 c20 b20 a20), s19: e20, v17: k2 + (23 22 21 20)
		// f = b20 ^ c20 ^ d20
		// y = ROL(a20, 5) + e20 + f + k2 + w[20]
		// b' = ROL(b, 30)
		// (e', v24) = ROL(y d20 c20 b' a20, 32) = (d20 c20 b' a20 y)
		// v24 = (d21 c21 b21 a21)
		// ...
		// v24 = (d24 c24 b24 a24)
		
		sha1su0	v27.4s, v28.4s, v29.4s
		// v27: (23 22 21 20), v28: (27 26 25 24), v29: (31 30 29 28)
		// v27 = (31 30 29 28) ^ (25 24 23 22) ^ (23 22 21 20)
		
		sha1su1	v27.4s, v26.4s
		// v27: (31 30 29 28) ^ (25 24 23 22) ^ (23 22 21 20)
		// v26: (35 34 33 32)
		// v27 = (39 38 37 36)
	
		#2 ----------
		add		v16.4s, v5.4s, v28.4s	// v16 = k2 + (27 26 25 24)
		sha1h	s19, s24				// s19 = ROL(a24, 30) (=e28)
		
		sha1p	q24, s18, v16.4s
		// v24: (d24 c24 b24 a24), s18: e24, v16: k2 + (27 26 25 24)
		// v24 = (d28 c28 b28 a28)
		
		sha1su0	v28.4s, v29.4s, v26.4s
		// v28: (27 26 25 24), v29: (31 30 29 28), v26: (35 34 33 32)
		// v28 = (35 34 33 32) ^ (29 28 27 26) ^ (27 26 25 24)

		sha1su1	v28.4s, v27.4s
		// v28: (35 34 33 32) ^ (29 28 27 26) ^ (27 26 25 24)
		// v27: (39 38 37 36)
		// v28 = (43 42 41 40)

		#3 ----------
		add		v17.4s, v5.4s, v29.4s	// v17 = k2 + (31 30 29 28)
		sha1h	s18, s24				// s18 = ROL(a28, 30) (=e32)
		sha1p	q24, s19, v17.4s
		// v24: (d28 c28 b28 a28), s19: e28, v17: k2 + (31 30 29 28)
		// v24 = (d32 c32 b32 a32)
		
		sha1su0	v29.4s, v26.4s, v27.4s	// v29: (31 30 29 28)
		sha1su1	v29.4s, v28.4s			// v29 = (47 46 45 44)

		#4 ----------
		add		v16.4s, v5.4s, v26.4s	// v16 = k2 + (35 34 33 32)
		sha1h	s19, s24				// s19 = e36
		sha1p	q24, s18, v16.4s
		// v24: (d32 c32 b32 a32), s18: e32, v16: k2 + (35 34 33 32)
		// v24 = (d36 c36 b36 a36)
		
		sha1su0	v26.4s, v27.4s, v28.4s	// v26: (35 34 33 32)
		sha1su1	v26.4s, v29.4s			// v26 = (51 50 49 48)

		#5 ----------
		add		v17.4s, v5.4s, v27.4s	// v17 = k2 + (39 38 37 36)
		sha1h	s18, s24				// s18 = e40
		sha1p	q24, s19, v17.4s
		// v24: (d36 c36 b36 a36)、s19: e36, v17: k2 + (39 38 37 36)
		// v24 = (d40 c40 b40 a40)
		
		sha1su0	v27.4s, v28.4s, v29.4s	// v27: (39 38 37 36)
		sha1su1	v27.4s, v26.4s			// v27 = (55 54 53 52)
	
		# ----------
		// LOOP 40 -> 59
		#1 ----------
		add		v16.4s, v6.4s, v28.4s	// v16 = k3 + (43 42 41 40)
		sha1h	s19, s24				// s19 = e44
		sha1m	q24, s18, v16.4s
		// v24: (d40 c40 b40 a40), s18: e40, v16: k3 + (43 42 41 40)
		// ((x AND y) OR ((x OR y) AND z)) == (x & y) | (x & z) | (y & z)
		// f = (b40 AND c40) OR ((b40 OR c40) AND d40)
		// y = ROL(a40, 5) + e40 + f + k3 + w[40]
		// b' = ROL(b40, 30)
		// (_, v24) = ROL((y d40 c40 b' a40), 32) = (d40 c40 b' a40 y)
		// v24 = (d41 c41 b41 a41)
		// ...
		// v24 = (d44 c44 b44 a44)
		
		sha1su0	v28.4s, v29.4s, v26.4s	// v28: (43 42 41 40)
		sha1su1	v28.4s, v27.4s			// v28 = (59 58 57 56)

		#2 ----------
		add		v17.4s, v6.4s, v29.4s	// v29: (47 46 45 44)
		sha1h	s18, s24
		sha1m	q24, s19, v17.4s		// v24 = (d48 c48 b48 a48)
		
		sha1su0	v29.4s, v26.4s, v27.4s
		sha1su1	v29.4s, v28.4s			// v29 = (63 62 61 60)
	
		#3 ----------
		add		v16.4s, v6.4s, v26.4s	// v26: (51 50 49 48)
		sha1h	s19, s24
		sha1m	q24, s18, v16.4s		// v24 = (d52 c52 b52 a52)
		
		sha1su0	v26.4s, v27.4s, v28.4s
		sha1su1	v26.4s, v29.4s			// v26 = (67 66 65 64)

		#4 ----------
		add		v17.4s, v6.4s, v27.4s	// v27: (55 54 53 52)
		sha1h	s18, s24
		sha1m	q24, s19, v17.4s		// v24 = (d56 c56 b56 a56)
		
		sha1su0	v27.4s, v28.4s, v29.4s
		sha1su1	v27.4s, v26.4s			// v27 = (71 70 69 68)
		
		#5 ----------
		add		v16.4s, v6.4s, v28.4s	// v28: (59 58 57 56)
		sha1h	s19, s24
		sha1m	q24, s18, v16.4s		// v24 = (d60 c60 b60 a60)
		
		sha1su0	v28.4s, v29.4s, v26.4s
		sha1su1	v28.4s, v27.4s			// v28 = (75 74 73 72)
	
		# ----------
		// LOOP 60 -> 79
		#1 ----------	
		add		v17.4s, v7.4s, v29.4s	// v29: (63 62 61 60)
		sha1h	s18, s24
		sha1p	q24, s19, v17.4s		// v24 = (d64 c64 b64 a64)
		
		sha1su0	v29.4s, v26.4s, v27.4s
		sha1su1	v29.4s, v28.4s			// v29: (79 78 77 76)
	
		#2 ----------	
		add		v16.4s, v7.4s, v26.4s	// v26: (67 66 65 64)
		sha1h	s19, s24				// s19 = e68
		sha1p	q24, s18, v16.4s		// v24 = (d68 c68 b68 a68)
	
		#3 ----------	
		add		v17.4s, v7.4s, v27.4s	// v27: (71 70 69 68)
		sha1h	s18, s24				// s18 = e72
		sha1p	q24, s19, v17.4s		// v24 = (d72 c72 b72 a72)
			
		#4 ----------	
		add		v16.4s, v7.4s, v28.4s	// v28: (75 74 73 72)
		sha1h	s19, s24				// s19 = e76
		sha1p	q24, s18, v16.4s		// v24 = (d76 c76 b76 a76)

		#5 ----------	
		add		v17.4s, v7.4s, v29.4s	// v29: (79 78 77 76)
		sha1h	s18, s24				// s18 = e80
		sha1p	q24, s19, v17.4s		// v24 = (d80 c80 b80 a80)

		# --------------------
		// v24 にハッシュ値 (D C B A)、V25.4s[0] に E が生成される
		add		v24.4s, v24.4s, v22.4s
		add		v25.4s, v25.4s, v18.4s		
		
		mov		x30, x29		// lr の復帰
		ret

# ---------------------------------
	.align	4
L_rcon:
	.word	0x5a827999, 0x5a827999, 0x5a827999, 0x5a827999  // v4 (= k1)
	.word	0x6ed9eba1, 0x6ed9eba1, 0x6ed9eba1, 0x6ed9eba1	// v5 (= k2)
	.word	0x8f1bbcdc, 0x8f1bbcdc, 0x8f1bbcdc, 0x8f1bbcdc  // v6 (= k3)
	.word	0xca62c1d6, 0xca62c1d6, 0xca62c1d6, 0xca62c1d6  // v7 (= k4)
	
